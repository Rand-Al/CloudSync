(function () { "use strict";document.addEventListener("DOMContentLoaded",function () { CloudSync.init();});var CloudSync = { init: function () { this.smoothScrolling();this.mobileMenu();this.scrollAnimations();this.parallaxCards();this.interactiveCards();this.initCopyLinkButton();this.contactForm.init();this.adaptivePages.init();this.smartHeader.init();this.lazyLoading.init();this.performance.init();},smoothScrolling: function () { var anchorLinks = document.querySelectorAll('a[href^="#"]');anchorLinks.forEach(function (link) { link.addEventListener("click",function (event) { event.preventDefault();var targetId = this.getAttribute("href");var targetElement = document.querySelector(targetId);if (targetElement) { var headerHeight = 80;var targetPosition = targetElement.offsetTop - headerHeight;window.scrollTo({ top: targetPosition,behavior: "smooth",});} });});},mobileMenu: function () { var menuToggle = document.querySelector(".menu-toggle");var navigation = document.querySelector(".main-navigation ul");if (!menuToggle || !navigation) return;var lockBodyScroll = function () { document.body.style.overflow = "hidden";navigation.style.overflowY = "auto";navigation.style.maxHeight = "calc(100vh - 80px)";};var unlockBodyScroll = function () { document.body.style.overflow = "";navigation.style.overflowY = "";navigation.style.maxHeight = "";};var closeMenu = function () { navigation.classList.remove("show");menuToggle.setAttribute("aria-expanded","false");unlockBodyScroll();var icon = menuToggle.querySelector("i");if (icon) { icon.classList.remove("fa-times");icon.classList.add("fa-bars");} };var openMenu = function () { navigation.classList.add("show");menuToggle.setAttribute("aria-expanded","true");lockBodyScroll();var icon = menuToggle.querySelector("i");if (icon) { icon.classList.remove("fa-bars");icon.classList.add("fa-times");} };menuToggle.addEventListener("click",function () { var isExpanded = this.getAttribute("aria-expanded") === "true";if (isExpanded) { closeMenu();} else { openMenu();} });document.addEventListener("click",function (event) { var isClickInside = navigation.contains(event.target) || menuToggle.contains(event.target);var isMenuOpen = navigation.classList.contains("show");if (!isClickInside && isMenuOpen) { closeMenu();} });window.addEventListener("resize",function () { var isMenuOpen = navigation.classList.contains("show");if (window.innerWidth >= 768 && isMenuOpen) { closeMenu();} });},scrollAnimations: function () { if ("IntersectionObserver" in window) { this.setupIntersectionObserver();} else { this.setupScrollListener();} },setupIntersectionObserver: function () { var observerOptions = { threshold: 0.1,rootMargin: "0px 0px -50px 0px",};var observer = new IntersectionObserver(function (entries) { entries.forEach(function (entry) { if (entry.isIntersecting) { entry.target.classList.add("visible");observer.unobserve(entry.target);} });},observerOptions);var animatedElements = document.querySelectorAll(".fade-in");animatedElements.forEach(function (element) { observer.observe(element);});},setupScrollListener: function () { window.addEventListener("scroll",function () { var animatedElements = document.querySelectorAll( ".fade-in:not(.visible)" );var windowHeight = window.innerHeight;var scrollPosition = window.pageYOffset;animatedElements.forEach(function (element) { var elementTop = element.offsetTop;if (elementTop < scrollPosition + windowHeight - 50) { element.classList.add("visible");} });});},parallaxCards: function () { var floatingCards = document.querySelectorAll(".floating-card");if (floatingCards.length === 0) return;window.addEventListener("scroll",function () { var scrollPosition = window.pageYOffset;var parallaxRate = scrollPosition * -0.5;floatingCards.forEach(function (card,index) { var offset = parallaxRate * (0.5 + index * 0.1);card.style.transform = "translateY(" + offset + "px)";});});},interactiveCards: function () { this.setupFeatureCardEffects();this.setupPricingCardEffects();},setupFeatureCardEffects: function () { var featureCards = document.querySelectorAll(".feature-card");featureCards.forEach(function (card) { card.addEventListener("mouseenter",function () { this.style.transform = "translateY(-10px) scale(1.02)";this.style.transition = "all 0.3s ease";});card.addEventListener("mouseleave",function () { this.style.transform = "translateY(0) scale(1)";this.style.transition = "all 0.3s ease";});});},setupPricingCardEffects: function () { var pricingCards = document.querySelectorAll(".pricing-card");pricingCards.forEach(function (card) { if (card.classList.contains("popular")) return;card.addEventListener("mouseenter",function () { this.style.transform = "translateY(-5px)";this.style.borderColor = "#667eea";this.style.transition = "all 0.3s ease";});card.addEventListener("mouseleave",function () { this.style.transform = "translateY(0)";this.style.borderColor = "rgba(255,255,255,0.1)";this.style.transition = "all 0.3s ease";});});},initCopyLinkButton: function () { var copyButtons = document.querySelectorAll(".share-copy");copyButtons.forEach(function (button) { button.addEventListener("click",function () { var url = this.getAttribute("data-url");var buttonText = this.querySelector("span");var originalText = buttonText.textContent;if (navigator.clipboard && window.isSecureContext) { navigator.clipboard .writeText(url) .then(function () { showCopySuccess();}) .catch(function () { fallbackCopyTextToClipboard(url);});} else { fallbackCopyTextToClipboard(url);} function showCopySuccess() { button.classList.add("copied");buttonText.textContent = "Copied!";setTimeout(function () { button.classList.remove("copied");buttonText.textContent = originalText;},2000);} function fallbackCopyTextToClipboard(text) { var textArea = document.createElement("textarea");textArea.value = text;textArea.style.position = "fixed";textArea.style.left = "-999999px";textArea.style.top = "-999999px";document.body.appendChild(textArea);textArea.focus();textArea.select();try { document.execCommand("copy");showCopySuccess();} catch (err) { console.error( "Fallback: Oops,unable to copy",err );} document.body.removeChild(textArea);} });});},contactForm: { init: function () { var form = document.getElementById('cloudsync-contact-form');if (!form) return;form.addEventListener('submit',this.handleSubmit.bind(this));},handleSubmit: function (e) { e.preventDefault();var form = e.target;var submitBtn = form.querySelector('.form-submit-btn');var responseDiv = form.querySelector('.form-response') || this.createResponseDiv(form);submitBtn.disabled = true;submitBtn.classList.add('loading');submitBtn.querySelector('.btn-text').textContent = cloudsync_ajax.strings.sending;var formData = new FormData();formData.append('action','cloudsync_contact_form');formData.append('nonce',cloudsync_ajax.nonce);formData.append('name',form.name.value);formData.append('email',form.email.value);formData.append('subject',form.subject.value);formData.append('message',form.message.value);fetch(cloudsync_ajax.ajax_url,{ method: 'POST',body: formData }) .then(response => response.json()) .then(data => { this.handleResponse(data,form,submitBtn,responseDiv);}) .catch(error => { this.handleError(error,submitBtn,responseDiv);});},handleResponse: function (data,form,submitBtn,responseDiv) { submitBtn.disabled = false;submitBtn.classList.remove('loading');submitBtn.querySelector('.btn-text').textContent = 'Send Message';responseDiv.textContent = data.data.message;responseDiv.className = 'form-response show ' + (data.success ? 'success' : 'error');if (data.success) { form.reset();} setTimeout(() => { responseDiv.classList.remove('show');},5000);},handleError: function (error,submitBtn,responseDiv) { submitBtn.disabled = false;submitBtn.classList.remove('loading');submitBtn.querySelector('.btn-text').textContent = 'Send Message';responseDiv.textContent = cloudsync_ajax.strings.error;responseDiv.className = 'form-response show error';console.error('Contact form error:',error);},createResponseDiv: function (form) { var div = document.createElement('div');div.className = 'form-response';form.appendChild(div);return div;} },smartHeader: { config: { offset: 100,tolerance: 5,hideClass: "header-hidden",scrollClass: "header-scrolled",headerSelector: ".site-header",},state: { lastScrollPosition: 0,ticking: false,headerElement: null,isInitialized: false,},getCurrentScrollPosition: function () { return window.pageYOffset || window.scrollY || 0;},hideHeader: function () { if (this.state.headerElement) { this.state.headerElement.classList.add( this.config.hideClass );} },showHeader: function () { if (this.state.headerElement) { this.state.headerElement.classList.remove( this.config.hideClass );} },updateHeader: function () { const currentScrollPosition = this.getCurrentScrollPosition();const scrollDifference = currentScrollPosition - this.state.lastScrollPosition;if (Math.abs(scrollDifference) < this.config.tolerance) { this.state.ticking = false;return;} if (currentScrollPosition <= 0) { this.showHeader();this.state.headerElement.classList.remove( this.config.scrollClass );} else if (currentScrollPosition > this.config.offset) { this.state.headerElement.classList.add( this.config.scrollClass );if (scrollDifference > 0) { this.hideHeader();} else { this.showHeader();} } else { this.showHeader();this.state.headerElement.classList.remove( this.config.scrollClass );} this.state.lastScrollPosition = currentScrollPosition;this.state.ticking = false;},requestUpdate: function () { if (!this.state.ticking) { window.requestAnimationFrame(this.updateHeader.bind(this));this.state.ticking = true;} },init: function () { if (this.state.isInitialized) { return false;} this.state.headerElement = document.querySelector( this.config.headerSelector );if (!this.state.headerElement) { console.error( "CloudSync SmartHeader: Header element not found with selector:",this.config.headerSelector );return false;} this.scrollHandler = this.requestUpdate.bind(this);window.addEventListener("scroll",this.scrollHandler,{ passive: true,});const currentPosition = this.getCurrentScrollPosition();if (currentPosition > this.config.offset) { this.state.headerElement.classList.add( this.config.scrollClass );} this.state.isInitialized = true;return true;},destroy: function () { if (this.scrollHandler) { window.removeEventListener("scroll",this.scrollHandler);} if (this.state.headerElement) { this.showHeader();this.state.headerElement.classList.remove( this.config.scrollClass );} this.state.lastScrollPosition = 0;this.state.ticking = false;this.state.headerElement = null;this.state.isInitialized = false;},updateConfig: function (newConfig) { Object.assign(this.config,newConfig);},},};CloudSync.adaptivePages = { config: { tocMinHeadings: 3,tocDesktopBreakpoint: 768,tocScrollOffset: 150,scrollThrottle: 16,resizeDebounce: 250,enableTOC: true,enableProgress: true,enableLegalNav: true,enableLightbox: true,debug: true,},state: { isInitialized: false,activeModules: [],currentBreakpoint: null,pageContext: null,},modules: { tableOfContents: { config: { minHeadings: 3,maxDepth: 6,headingSelector: ".entry-content h1,.entry-content h2,.entry-content h3,.entry-content h4,.entry-content h5,.entry-content h6",containerSelector: ".page-content-wrapper",scrollOffset: 120,},state: { isInitialized: false,isReady: false,headings: [],tocStructure: null,currentBreakpoint: null,currentMode: "hidden",activeHeading: null,isScrolling: false,pageLoadTime: null,preservedScrollPosition: null,lastKnownScrollPosition: 0,tocElements: { desktopContainer: null,mobileContainer: null,progressBar: null,tocList: null,},observer: null,eventHandlers: { scroll: null,resize: null,click: null,},},init: function () { var utils = CloudSync.adaptivePages.utils;utils.log( "Starting Table of Contents module initialization" );try { if (this.state.isInitialized) { utils.log( "TOC module already initialized,skipping" );return true;} if ( !document.body || !document.body.classList.contains("page") ) { utils.log( "Not on a page context,TOC initialization cancelled" );return false;} this.state.pageLoadTime = Date.now();utils.log("Scanning page for headings...");var headingsScanResult = this.scanHeadings();if ( !headingsScanResult || this.state.headings.length === 0 ) { utils.log( "No headings found on page,TOC not needed" );return false;} if ( this.state.headings.length < this.config.minHeadings ) { utils.log( "Insufficient headings for TOC: found " + this.state.headings.length + ",minimum required " + this.config.minHeadings );return false;} utils.log( "Successfully found " + this.state.headings.length + " headings for TOC" );var currentBreakpoint = CloudSync.adaptivePages.state.currentBreakpoint;utils.log("Current breakpoint: " + currentBreakpoint);if (currentBreakpoint === "desktop") { this.state.currentMode = "desktop";utils.log("TOC will use desktop floating mode");} else { this.state.currentMode = "mobile";utils.log("TOC will use mobile collapsible mode");} utils.log( "Creating TOC interface for " + this.state.currentMode + " mode" );var interfaceCreated = false;if (this.state.currentMode === "desktop") { interfaceCreated = this.createDesktopTOC();} else if (this.state.currentMode === "mobile") { interfaceCreated = this.createMobileTOC();} if (!interfaceCreated) { utils.log( "Failed to create TOC interface,initialization aborted","error" );return false;} utils.log("TOC interface created successfully");utils.log("Binding TOC interactive events");var eventsBindingResult = this.bindEvents();if (!eventsBindingResult) { utils.log( "Failed to bind TOC events,initialization incomplete","error" );return false;} utils.log("TOC events bound successfully");this.state.isInitialized = true;this.state.isReady = true;utils.log( "Table of Contents module initialization completed successfully" );utils.log( "Active mode: " + this.state.currentMode + ",headings: " + this.state.headings.length );return true;} catch (error) { utils.log( "Critical error during TOC initialization","error",error );utils.log("Error message: " + error.message,"error");if (error.stack) { utils.log("Error stack: " + error.stack,"error");} this.state.isInitialized = false;this.state.isReady = false;return false;} },scanHeadings: function () { var utils = CloudSync.adaptivePages.utils;utils.log("Starting headings scan process");this.state.headings = [];var headingElements = document.querySelectorAll( this.config.headingSelector );utils.log( "Found " + headingElements.length + " potential heading elements" );if (headingElements.length === 0) { utils.log( "No heading elements found with selector: " + this.config.headingSelector );return false;} for (var i = 0;i < headingElements.length;i++) { var headingElement = headingElements[i];var tagName = headingElement.tagName.toLowerCase();var level = parseInt(tagName.charAt(1),10);var text = headingElement.textContent || headingElement.innerText || "";text = text.trim();if (!text) { utils.log( "Skipping empty heading element at position " + i );continue;} utils.log( 'Processing heading: "' + text + '" (level ' + level + ")" );var headingId = headingElement.id;if (!headingId) { headingId = utils.generateUniqueId(text,"heading");headingElement.id = headingId;utils.log( "Generated new ID for heading: " + headingId );} else { var duplicateElements = document.querySelectorAll( "#" + headingId );if (duplicateElements.length > 1) { var newId = utils.generateUniqueId( text,"heading" );headingElement.id = newId;headingId = newId;utils.log( "Resolved ID conflict,assigned new ID: " + headingId );} else { utils.log( "Using existing unique ID: " + headingId );} } var headingData = { element: headingElement,id: headingId,text: text,level: level,offsetTop: 0,};this.state.headings.push(headingData);utils.log( "Added heading to collection: " + text + " (ID: " + headingId + ")" );} utils.log( "Calculating scroll positions for navigation accuracy" );for (var j = 0;j < this.state.headings.length;j++) { var heading = this.state.headings[j];heading.offsetTop = heading.element.offsetTop;utils.log( 'Heading "' + heading.text + '" position: ' + heading.offsetTop + "px" );} if (this.state.headings.length === 0) { utils.log( "Scan completed but no valid headings were processed","warn" );return false;} utils.log("Headings scan completed successfully");utils.log( "Total headings processed: " + this.state.headings.length );utils.log( "Heading levels found: " + this.getHeadingLevelsRange() );return true;},getHeadingLevelsRange: function () { if ( !this.state.headings || this.state.headings.length === 0 ) { return "none";} var levels = [];for (var i = 0;i < this.state.headings.length;i++) { var level = this.state.headings[i].level;if (levels.indexOf(level) === -1) { levels.push(level);} } levels.sort(function (a,b) { return a - b;});if (levels.length === 1) { return "H" + levels[0];} else { return ( "H" + levels[0] + "-H" + levels[levels.length - 1] );} },bindEvents: function () { var utils = CloudSync.adaptivePages.utils;var self = this;utils.log("Setting up TOC event handlers");if (this.state.currentMode === "desktop") { if (!this.state.tocElements.desktopContainer) { utils.log( "Desktop TOC container not found,cannot bind events","error" );return false;} this.setupSmartVisibility();this.setupNavigationHandlers();this.setupCollapseHandlers();this.setupScrollTracking();this.setupProgressTracking();utils.log( "Desktop TOC event handlers bound successfully" );} else if (this.state.currentMode === "mobile") { utils.log( "Mobile TOC events already bound during creation" );} return true;},createDesktopTOC: function () { var utils = CloudSync.adaptivePages.utils;var existingTOC = document.querySelector(".advanced-toc");if (existingTOC) { utils.log( "Removing existing desktop TOC to prevent duplicates" );existingTOC.parentNode.removeChild(existingTOC);} utils.log("Creating desktop TOC interface");var targetContainer = utils.querySelector( this.config.containerSelector );if (!targetContainer) { utils.log( "Target container not found: " + this.config.containerSelector,"error" );return false;} var tocContainer = document.createElement("div");tocContainer.className = "advanced-toc";tocContainer.setAttribute( "aria-label","Table of Contents Navigation" );var tocHeader = document.createElement("div");tocHeader.className = "toc-header";var tocTitle = document.createElement("div");tocTitle.className = "toc-title";tocTitle.innerHTML = '</span><span>Table of Contents</span><i class="fas fa-list-ul" aria-hidden="true"></i>';var tocControls = document.createElement("div");tocControls.className = "toc-controls";var collapseButton = document.createElement("button");collapseButton.className = "toc-collapse";collapseButton.setAttribute( "aria-label","Collapse table of contents" );collapseButton.innerHTML = '<i class="fas fa-minus" aria-hidden="true"></i>';tocControls.appendChild(collapseButton);tocHeader.appendChild(tocControls);tocHeader.appendChild(tocTitle);var tocProgress = document.createElement("div");tocProgress.className = "toc-progress";var progressBar = document.createElement("div");progressBar.className = "toc-progress-bar";progressBar.setAttribute("role","progressbar");progressBar.setAttribute("aria-valuemin","0");progressBar.setAttribute("aria-valuemax","100");progressBar.setAttribute("aria-valuenow","0");progressBar.setAttribute("aria-label","Reading progress");tocProgress.appendChild(progressBar);var tocNavigation = document.createElement("div");tocNavigation.className = "toc-navigation";var tocList = document.createElement("ul");tocList.className = "toc-list";tocList.setAttribute("role","navigation");tocList.setAttribute( "aria-label","Document outline navigation" );for (var i = 0;i < this.state.headings.length;i++) { var heading = this.state.headings[i];var listItem = document.createElement("li");listItem.className = "toc-item toc-h" + heading.level;var link = document.createElement("a");link.className = "toc-link";link.href = "#" + heading.id;link.textContent = heading.text;link.setAttribute("data-heading-id",heading.id);link.setAttribute( "aria-describedby","toc-description" );listItem.appendChild(link);tocList.appendChild(listItem);} tocNavigation.appendChild(tocList);tocContainer.appendChild(tocHeader);tocContainer.appendChild(tocProgress);tocContainer.appendChild(tocNavigation);this.state.tocElements.desktopContainer = tocContainer;this.state.tocElements.progressBar = progressBar;this.state.tocElements.tocList = tocList;targetContainer.appendChild(tocContainer);utils.log( "Desktop TOC interface created successfully with " + this.state.headings.length + " navigation items" );return true;},setupCollapseHandlers: function () { var utils = CloudSync.adaptivePages.utils;var self = this;utils.log("Setting up TOC collapse/expand functionality");if (!this.state.tocElements.desktopContainer) { return false;} var collapseButton = this.state.tocElements.desktopContainer.querySelector( ".toc-collapse" );if (!collapseButton) { utils.log( "Collapse button not found,cannot setup collapse handlers","error" );return false;} this.state.isCollapsed = false;utils.addEventListener( collapseButton,"click",function (event) { event.preventDefault();self.state.isCollapsed = !self.state.isCollapsed;self.updateCollapseState();utils.log( "TOC " + (self.state.isCollapsed ? "collapsed" : "expanded") + " by user interaction" );},{ passive: false } );utils.log("Collapse functionality activated successfully");return true;},updateCollapseState: function () { var utils = CloudSync.adaptivePages.utils;var tocContainer = this.state.tocElements.desktopContainer;var collapseButton = tocContainer.querySelector(".toc-collapse");var buttonIcon = collapseButton.querySelector("i");if (this.state.isCollapsed) { tocContainer.classList.add("collapsed");buttonIcon.className = "fas fa-plus";collapseButton.setAttribute( "aria-label","Expand table of contents" );collapseButton.setAttribute("aria-expanded","false");utils.log( "Applied collapsed state: TOC minimized to compact view" );} else { tocContainer.classList.remove("collapsed");buttonIcon.className = "fas fa-minus";collapseButton.setAttribute( "aria-label","Collapse table of contents" );collapseButton.setAttribute("aria-expanded","true");utils.log( "Applied expanded state: TOC showing full navigation view" );} },setupScrollTracking: function () { var utils = CloudSync.adaptivePages.utils;var self = this;utils.log("Setting up intelligent active section tracking");var trackingConfig = { activationLine: -0.5,updateThreshold: 50,debounceDelay: 100,};var trackingState = { lastScrollPosition: 0,currentActiveId: null,lastUpdateTime: 0,};var scrollTracker = utils.throttle( function () { var currentTime = Date.now();var currentScroll = window.pageYOffset || document.documentElement.scrollTop;self.state.lastKnownScrollPosition = currentScroll;var scrollDifference = Math.abs( currentScroll - trackingState.lastScrollPosition );if ( scrollDifference >= trackingConfig.updateThreshold ) { var activeHeadingId = self.determineActiveSection( currentScroll,trackingConfig.activationLine );if ( activeHeadingId !== trackingState.currentActiveId ) { self.updateActiveHighlight( trackingState.currentActiveId,activeHeadingId );trackingState.currentActiveId = activeHeadingId;utils.log( "Active section changed to: " + (activeHeadingId || "none") );} trackingState.lastScrollPosition = currentScroll;trackingState.lastUpdateTime = currentTime;} },trackingConfig.debounceDelay,"toc-scroll-tracking" );utils.addEventListener(window,"scroll",scrollTracker,{ passive: true,});utils.log( "Active section tracking system initialized successfully" );},determineActiveSection: function ( currentScrollPosition,activationLineRatio ) { var utils = CloudSync.adaptivePages.utils;var viewportHeight = window.innerHeight;var activationLinePosition = currentScrollPosition + viewportHeight * activationLineRatio;var activeHeadingId = null;var smallestDistance = Infinity;for (var i = 0;i < this.state.headings.length;i++) { var heading = this.state.headings[i];var headingPosition = heading.offsetTop;var distanceFromLine = Math.abs( headingPosition - activationLinePosition );if ( headingPosition <= activationLinePosition && distanceFromLine < smallestDistance ) { smallestDistance = distanceFromLine;activeHeadingId = heading.id;} } utils.log( "Active section analysis: scroll=" + Math.round(currentScrollPosition) + "px,activation=" + Math.round(activationLinePosition) + "px,result=" + (activeHeadingId || "none") );return activeHeadingId;},updateActiveHighlight: function ( previousActiveId,newActiveId ) { var utils = CloudSync.adaptivePages.utils;utils.log( "DEBUG: updateActiveHighlight called: " + previousActiveId + " → " + newActiveId );if (!this.state.tocElements.tocList) { utils.log( "DEBUG: tocList not available,skipping highlight update" );return;} if (previousActiveId) { var previousLink = this.state.tocElements.tocList.querySelector( '[data-heading-id="' + previousActiveId + '"]' );if (previousLink) { previousLink.classList.remove("active");utils.log( "Removed active highlight from: " + previousActiveId );} } if (newActiveId) { var newActiveLink = this.state.tocElements.tocList.querySelector( '[data-heading-id="' + newActiveId + '"]' );if (newActiveLink) { newActiveLink.classList.add("active");utils.log( "Applied active highlight to: " + newActiveId );this.ensureActiveItemVisibility(newActiveLink);} } if (!newActiveId && previousActiveId) { utils.log( "No active section determined - user may be at document beginning" );} },ensureActiveItemVisibility: function (activeLink) { var utils = CloudSync.adaptivePages.utils;if (!this.state.tocElements.desktopContainer) { return;} var tocNavigation = this.state.tocElements.desktopContainer.querySelector( ".toc-navigation" );if (!tocNavigation) { utils.log( "TOC navigation container not found for auto-scroll","warn" );return;} var hasVerticalScroll = tocNavigation.scrollHeight > tocNavigation.clientHeight;if (!hasVerticalScroll) { utils.log( "TOC content fits in visible area,no scrolling needed" );return;} var containerRect = tocNavigation.getBoundingClientRect();var linkRect = activeLink.getBoundingClientRect();var containerTop = 0;var containerBottom = containerRect.height;var linkTop = linkRect.top - containerRect.top + tocNavigation.scrollTop;var linkBottom = linkTop + linkRect.height;var currentScrollTop = tocNavigation.scrollTop;var needsScrolling = false;var targetScrollPosition = currentScrollTop;var padding = 40;if (linkTop < currentScrollTop + padding) { needsScrolling = true;targetScrollPosition = Math.max(0,linkTop - padding);utils.log( "Scrolling TOC up to show active item: " + activeLink.textContent.substring(0,30) + "..." );} else if ( linkBottom > currentScrollTop + containerRect.height - padding ) { needsScrolling = true;targetScrollPosition = linkBottom - containerRect.height + padding;utils.log( "Scrolling TOC down to show active item: " + activeLink.textContent.substring(0,30) + "..." );} if (needsScrolling) { tocNavigation.scrollTo({ top: Math.max(0,targetScrollPosition),behavior: "smooth",});utils.log( "TOC auto-scroll executed to position: " + targetScrollPosition );} else { utils.log( "Active item already visible in TOC,no scrolling needed" );} },setupProgressTracking: function () { var utils = CloudSync.adaptivePages.utils;var self = this;utils.log("Setting up reading progress tracking system");var progressConfig = { updateThreshold: 25,smoothingFactor: 0.1,completionThreshold: 0.95,};var progressState = { lastCalculatedProgress: 0,lastScrollPosition: 0,documentHeight: 0,viewportHeight: 0,};var updateDocumentDimensions = function () { progressState.documentHeight = Math.max( document.body.scrollHeight,document.body.offsetHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight );progressState.viewportHeight = window.innerHeight;utils.log( "Updated document dimensions: height=" + progressState.documentHeight + "px,viewport=" + progressState.viewportHeight + "px" );};updateDocumentDimensions();var progressTracker = utils.throttle( function () { var currentScrollPosition = window.pageYOffset || document.documentElement.scrollTop;var scrollDifference = Math.abs( currentScrollPosition - progressState.lastScrollPosition );if ( scrollDifference >= progressConfig.updateThreshold ) { var newProgress = self.calculateReadingProgress( currentScrollPosition,progressState,progressConfig );var smoothedProgress = self.smoothProgressTransition( progressState.lastCalculatedProgress,newProgress,progressConfig.smoothingFactor );self.updateProgressBar(smoothedProgress);progressState.lastCalculatedProgress = smoothedProgress;progressState.lastScrollPosition = currentScrollPosition;} },50,"toc-progress-tracking" );utils.addEventListener(window,"scroll",progressTracker,{ passive: true,});utils.addEventListener( window,"resize",utils.throttle( function () { updateDocumentDimensions();progressTracker();},250,"toc-progress-resize" ),{ passive: true } );utils.log( "Reading progress tracking system initialized successfully" );},calculateReadingProgress: function ( currentScrollPosition,progressState,progressConfig ) { var utils = CloudSync.adaptivePages.utils;utils.log("=== PROGRESS CALCULATION DIAGNOSIS ===");utils.log( "Current scroll position: " + currentScrollPosition + "px" );utils.log( "Document height: " + progressState.documentHeight + "px" );utils.log( "Viewport height: " + progressState.viewportHeight + "px" );var maxScrollableDistance = progressState.documentHeight - progressState.viewportHeight;utils.log( "Calculated max scrollable distance: " + maxScrollableDistance + "px" );if (maxScrollableDistance <= 0) { utils.log( "Document shorter than viewport - progress should be 100%" );return 1;} var rawProgress = currentScrollPosition / maxScrollableDistance;utils.log( "Raw progress calculation: " + currentScrollPosition + " / " + maxScrollableDistance + " = " + rawProgress );var clampedProgress = Math.min(1,Math.max(0,rawProgress));utils.log("Clamped progress (0-1): " + clampedProgress);var progressPercentage = Math.round(clampedProgress * 100);utils.log("Final percentage: " + progressPercentage + "%");utils.log("=== END DIAGNOSIS ===");return clampedProgress;},applyProgressAdjustments: function ( rawProgress,progressConfig ) { var adjustedProgress = rawProgress;if (rawProgress >= progressConfig.completionThreshold) { var remainingDistance = 1 - progressConfig.completionThreshold;var progressBeyondThreshold = rawProgress - progressConfig.completionThreshold;var completionMultiplier = progressBeyondThreshold / remainingDistance;adjustedProgress = progressConfig.completionThreshold + remainingDistance * this.easeInOutQuad(completionMultiplier);} if (rawProgress <= 0.1) { adjustedProgress = rawProgress * 1.2;} return Math.min(1,Math.max(0,adjustedProgress));},easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;},smoothProgressTransition: function ( previousProgress,newProgress,smoothingFactor ) { var progressDifference = Math.abs( newProgress - previousProgress );var adaptiveFactor = smoothingFactor;if (progressDifference > 0.1) { adaptiveFactor = 0.4;} if (newProgress > 0.9) { adaptiveFactor = 0.6;} if (newProgress > 0.95) { adaptiveFactor = 0.8;} var actualDifference = newProgress - previousProgress;var smoothedChange = actualDifference * adaptiveFactor;return previousProgress + smoothedChange;},updateProgressBar: function (progressValue) { var utils = CloudSync.adaptivePages.utils;var progressBar = this.state.tocElements.progressBar;if (!progressBar) { return;} var progressPercentage = Math.round(progressValue * 100);progressBar.style.width = progressPercentage + "%";progressBar.setAttribute( "aria-valuenow",progressPercentage );var readableProgress = progressPercentage + " percent complete";progressBar.setAttribute( "aria-valuetext",readableProgress );utils.log( "Progress bar updated to " + progressPercentage + "% (value: " + Math.round(progressValue * 1000) / 1000 + ")" );},createMobileTOC: function () { var utils = CloudSync.adaptivePages.utils;utils.log("Creating mobile TOC interface");var existingFloatingButton = document.querySelector( ".floating-toc-button" );var existingMobilePanel = document.querySelector(".mobile-toc-panel");if (existingFloatingButton) { existingFloatingButton.remove();utils.log("Removed existing floating TOC button");} if (existingMobilePanel) { existingMobilePanel.remove();utils.log("Removed existing mobile TOC panel");} var floatingButton = document.createElement("div");floatingButton.className = "floating-toc-button";floatingButton.setAttribute("role","button");floatingButton.setAttribute( "aria-label","Open table of contents" );floatingButton.setAttribute("tabindex","0");var progressRing = document.createElement("div");progressRing.className = "progress-ring";var progressSvg = document.createElementNS( "http: "svg" );progressSvg.setAttribute("class","progress-circle");progressSvg.setAttribute("width","56");progressSvg.setAttribute("height","56");progressSvg.setAttribute("viewBox","0 0 56 56");var backgroundCircle = document.createElementNS( "http: "circle" );backgroundCircle.setAttribute( "class","progress-background" );backgroundCircle.setAttribute("cx","28");backgroundCircle.setAttribute("cy","28");backgroundCircle.setAttribute("r","24");backgroundCircle.setAttribute("fill","none");backgroundCircle.setAttribute( "stroke","rgba(255,255,255,0.1)" );backgroundCircle.setAttribute("stroke-width","2.5");var progressCircle = document.createElementNS( "http: "circle" );progressCircle.setAttribute("cx","28");progressCircle.setAttribute("cy","28");progressCircle.setAttribute("r","24");progressCircle.setAttribute("fill","none");progressCircle.setAttribute( "stroke","rgba(102,126,234,0.8)" );progressCircle.setAttribute("stroke-width","2.5");progressCircle.setAttribute("stroke-linecap","round");progressCircle.setAttribute("stroke-dasharray","150.80");progressCircle.setAttribute("stroke-dashoffset","150.80");progressCircle.setAttribute( "transform","rotate(-90 28 28)" );progressSvg.appendChild(backgroundCircle);progressSvg.appendChild(progressCircle);progressRing.appendChild(progressSvg);utils.log( "Created progress circle SVG with circumference: 150.80" );var buttonIcon = document.createElement("i");buttonIcon.className = "toc-button-icon fas fa-list-ul";buttonIcon.setAttribute("aria-hidden","true");var buttonPulse = document.createElement("div");buttonPulse.className = "button-pulse";floatingButton.appendChild(progressRing);floatingButton.appendChild(buttonIcon);floatingButton.appendChild(buttonPulse);var mobilePanel = document.createElement("div");mobilePanel.className = "mobile-toc-panel";mobilePanel.setAttribute("role","dialog");mobilePanel.setAttribute("aria-modal","true");mobilePanel.setAttribute( "aria-labelledby","mobile-toc-title" );var panelOverlay = document.createElement("div");panelOverlay.className = "mobile-toc-overlay";var panelContent = document.createElement("div");panelContent.className = "mobile-toc-content";var panelHeader = document.createElement("div");panelHeader.className = "mobile-toc-header";var panelTitle = document.createElement("h3");panelTitle.id = "mobile-toc-title";panelTitle.className = "mobile-toc-title";panelTitle.textContent = "Table of Contents";var panelProgress = document.createElement("div");panelProgress.className = "mobile-toc-progress";panelProgress.textContent = "0% Complete";var closeButton = document.createElement("button");closeButton.className = "mobile-toc-close";closeButton.setAttribute( "aria-label","Close table of contents" );closeButton.innerHTML = '<i class="fas fa-times" aria-hidden="true"></i>';panelHeader.appendChild(panelTitle);panelHeader.appendChild(panelProgress);panelHeader.appendChild(closeButton);var panelNavigation = document.createElement("div");panelNavigation.className = "mobile-toc-navigation";var tocList = document.createElement("ul");tocList.className = "mobile-toc-list";this.state.headings.forEach(function (heading,index) { var listItem = document.createElement("li");listItem.className = "mobile-toc-item toc-h" + heading.level;var link = document.createElement("a");link.className = "mobile-toc-link";link.href = "#" + heading.id;link.textContent = heading.text;link.setAttribute("data-heading-index",index);listItem.appendChild(link);tocList.appendChild(listItem);});panelNavigation.appendChild(tocList);var panelFooter = document.createElement("div");panelFooter.className = "mobile-toc-footer";var quickActions = document.createElement("div");quickActions.className = "mobile-toc-quick-actions";var topButton = document.createElement("button");topButton.className = "quick-action-btn";topButton.innerHTML = '<i class="fas fa-arrow-up"></i> Top';topButton.setAttribute("aria-label","Go to top of page");var bottomButton = document.createElement("button");bottomButton.className = "quick-action-btn";bottomButton.innerHTML = '<i class="fas fa-arrow-down"></i> Bottom';bottomButton.setAttribute( "aria-label","Go to bottom of page" );quickActions.appendChild(topButton);quickActions.appendChild(bottomButton);panelFooter.appendChild(quickActions);panelContent.appendChild(panelHeader);panelContent.appendChild(panelNavigation);panelContent.appendChild(panelFooter);mobilePanel.appendChild(panelOverlay);mobilePanel.appendChild(panelContent);document.body.appendChild(floatingButton);document.body.appendChild(mobilePanel);this.state.tocElements.mobileButton = floatingButton;this.state.tocElements.mobilePanel = mobilePanel;this.state.tocElements.mobileProgressCircle = progressCircle;this.state.tocElements.mobilePanelProgress = panelProgress;this.state.tocElements.mobileList = tocList;this.bindMobileEvents();var initialScrollTop = window.pageYOffset || document.documentElement.scrollTop;var initialDocumentHeight = document.documentElement.scrollHeight - window.innerHeight;var initialScrollProgress = initialDocumentHeight > 0 ? initialScrollTop / initialDocumentHeight : 0;this.updateMobileProgress( Math.min(Math.max(initialScrollProgress,0),1) );utils.log("Mobile TOC interface created successfully");return true;},updateMobileProgress: function (progressValue) { var utils = CloudSync.adaptivePages.utils;if ( !this.state.tocElements.mobileProgressCircle || !this.state.tocElements.mobilePanelProgress ) { utils.log( "Mobile progress elements not found","error" );return;} var circumference = 150.8;var offset = circumference - progressValue * circumference;this.state.tocElements.mobileProgressCircle.setAttribute( "stroke-dashoffset",offset );var progressPercentage = Math.round(progressValue * 100);this.state.tocElements.mobilePanelProgress.textContent = progressPercentage + "% Complete";var button = this.state.tocElements.mobileButton;if (progressPercentage >= 100) { button.classList.add("progress-complete");} else { button.classList.remove("progress-complete");} utils.log( "Mobile progress updated to " + progressPercentage + "%" );},toggleMobilePanel: function (forceState) { var utils = CloudSync.adaptivePages.utils;if (!this.state.tocElements.mobilePanel) { utils.log( "Mobile panel not found,cannot toggle","error" );return false;} var panel = this.state.tocElements.mobilePanel;var isCurrentlyOpen = panel.classList.contains("panel-open");var shouldOpen = forceState !== undefined ? forceState : !isCurrentlyOpen;if (shouldOpen && !isCurrentlyOpen) { utils.log("Opening mobile TOC panel");panel.style.display = "block";panel.style.visibility = "visible";panel.style.opacity = "1";panel.offsetHeight;panel.classList.add("panel-opening","panel-open");document.body.style.overflow = "hidden";var closeButton = panel.querySelector(".mobile-toc-close");if (closeButton) { closeButton.focus();} this.state.mobilePanel = { isOpen: true };var openEvent = new CustomEvent("mobileTOCOpened",{ detail: { panel: panel },});document.dispatchEvent(openEvent);} else if (!shouldOpen && isCurrentlyOpen) { utils.log("Closing mobile TOC panel");panel.classList.remove("panel-open","panel-opening");panel.style.opacity = "";panel.style.visibility = "";document.body.style.overflow = "";setTimeout(function () { panel.style.display = "none";},300);if (this.state.tocElements.mobileButton) { this.state.tocElements.mobileButton.focus();} this.state.mobilePanel = { isOpen: false };var closeEvent = new CustomEvent("mobileTOCClosed",{ detail: { panel: panel },});document.dispatchEvent(closeEvent);} return shouldOpen;},bindMobileEvents: function () { var utils = CloudSync.adaptivePages.utils;var self = this;utils.log("Binding mobile TOC event handlers");if ( !this.state.tocElements.mobileButton || !this.state.tocElements.mobilePanel ) { utils.log( "Mobile TOC elements not found,cannot bind events","error" );return false;} var button = this.state.tocElements.mobileButton;var panel = this.state.tocElements.mobilePanel;var buttonClickHandler = function (event) { event.preventDefault();event.stopPropagation();self.toggleMobilePanel();utils.log("Mobile TOC button clicked");};var buttonKeyHandler = function (event) { if (event.key === "Enter" || event.key === " ") { event.preventDefault();self.toggleMobilePanel();utils.log( "Mobile TOC button activated via keyboard" );} else if (event.key === "Escape") { self.toggleMobilePanel(false);} };var closeButtonHandler = function (event) { event.preventDefault();self.toggleMobilePanel(false);utils.log("Mobile TOC panel closed via close button");};var overlayClickHandler = function (event) { var panelContent = panel.querySelector( ".mobile-toc-content" );var isClickOutsideContent = !panelContent.contains( event.target );var isClickOnOverlay = event.target.classList.contains( "mobile-toc-overlay" );if (isClickOnOverlay || isClickOutsideContent) { self.toggleMobilePanel(false);utils.log( "Mobile TOC panel closed via overlay click" );} };var documentClickHandler = function (event) { if (!panel.classList.contains("panel-open")) { return;} if (button.contains(event.target)) { return;} var panelContent = panel.querySelector( ".mobile-toc-content" );if ( panelContent && panelContent.contains(event.target) ) { return;} self.toggleMobilePanel(false);utils.log("Mobile TOC panel closed via document click");};var linkClickHandler = function (event) { event.preventDefault();var targetId = this.getAttribute("href");var allLinks = panel.querySelectorAll(".mobile-toc-link");allLinks.forEach(function (link) { link.parentElement.classList.remove( "active-section" );});this.parentElement.classList.add("active-section");var targetElement = document.querySelector(targetId);if (targetElement) { var headerOffset = 100;var rect = targetElement.getBoundingClientRect();var currentScrollTop = window.pageYOffset || document.documentElement.scrollTop;var targetPosition = rect.top + currentScrollTop - headerOffset;window.scrollTo({ top: targetPosition,behavior: "smooth",});setTimeout(function () { self.toggleMobilePanel(false);},300);utils.log("Navigated to section: " + targetId);} };var topButtonHandler = function (event) { event.preventDefault();window.scrollTo({ top: 0,behavior: "smooth" });self.toggleMobilePanel(false);utils.log("Navigated to top of page");};var bottomButtonHandler = function (event) { event.preventDefault();var documentHeight = Math.max( document.body.scrollHeight,document.body.offsetHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight );window.scrollTo({ top: documentHeight,behavior: "smooth",});self.toggleMobilePanel(false);utils.log("Navigated to bottom of page");};var globalKeyHandler = function (event) { if ( event.key === "Escape" && panel.classList.contains("panel-open") ) { self.toggleMobilePanel(false);} };button.addEventListener("click",buttonClickHandler);button.addEventListener("keydown",buttonKeyHandler);var closeButton = panel.querySelector(".mobile-toc-close");if (closeButton) { closeButton.addEventListener( "click",closeButtonHandler );} var overlay = panel.querySelector(".mobile-toc-overlay");if (overlay) { overlay.addEventListener("click",overlayClickHandler);} var navigationLinks = panel.querySelectorAll(".mobile-toc-link");navigationLinks.forEach(function (link) { link.addEventListener("click",linkClickHandler);});var topButton = panel.querySelector(".quick-action-btn");var bottomButton = panel.querySelectorAll(".quick-action-btn")[1];if (topButton) { topButton.addEventListener("click",topButtonHandler);} if (bottomButton) { bottomButton.addEventListener( "click",bottomButtonHandler );} document.addEventListener("keydown",globalKeyHandler);document.addEventListener("click",documentClickHandler);this.state.mobileEventHandlers = { buttonClick: buttonClickHandler,buttonKey: buttonKeyHandler,closeButton: closeButtonHandler,overlayClick: overlayClickHandler,documentClick: documentClickHandler,linkClick: linkClickHandler,topButton: topButtonHandler,bottomButton: bottomButtonHandler,globalKey: globalKeyHandler,};var mobileProgressHandler = function () { var scrollTop = window.pageYOffset || document.documentElement.scrollTop;var documentHeight = document.documentElement.scrollHeight - window.innerHeight;var scrollProgress = documentHeight > 0 ? scrollTop / documentHeight : 0;self.updateMobileProgress( Math.min(Math.max(scrollProgress,0),1) );};var throttledMobileScrollHandler = utils.throttle( mobileProgressHandler,16 );window.addEventListener( "scroll",throttledMobileScrollHandler,{ passive: true } );if (!this.state.eventHandlers) { this.state.eventHandlers = {};} this.state.mobileScrollHandler = throttledMobileScrollHandler;utils.log("Mobile TOC event handlers bound successfully");return true;},handleBreakpointChange: function ( oldBreakpoint,newBreakpoint ) { var utils = CloudSync.adaptivePages.utils;var self = this;utils.log( "TOC handling breakpoint change: " + oldBreakpoint + " → " + newBreakpoint );var newMode = newBreakpoint === "desktop" ? "desktop" : "mobile";var oldMode = this.state.currentMode;if (oldMode !== newMode) { utils.log( "TOC mode changing from " + oldMode + " to " + newMode );var scrollY = window.scrollY;var pageYOffset = window.pageYOffset;var docElementScrollTop = document.documentElement.scrollTop;var bodyScrollTop = document.body.scrollTop;utils.log( "DEBUG scroll methods: scrollY=" + scrollY + ",pageYOffset=" + pageYOffset + ",docElement.scrollTop=" + docElementScrollTop + ",body.scrollTop=" + bodyScrollTop );var capturedScroll = scrollY || pageYOffset || docElementScrollTop || bodyScrollTop || 0;this.state.preservedScrollPosition = capturedScroll > 0 ? capturedScroll : this.state.lastKnownScrollPosition;utils.log( "Preserving scroll position: " + this.state.preservedScrollPosition + "px" + " (captured=" + capturedScroll + ",backup=" + this.state.lastKnownScrollPosition + ")" );this.cleanup();this.state.currentMode = newMode;var interfaceCreated = false;if (newMode === "desktop") { interfaceCreated = this.createDesktopTOC();if (interfaceCreated) { this.recalculateHeadingPositions();this.setupSmartVisibility();this.setupNavigationHandlers();this.setupCollapseHandlers();this.setupScrollTracking();this.setupProgressTracking();utils.log( "Desktop TOC fully initialized with all handlers" );} } else if (newMode === "mobile") { interfaceCreated = this.createMobileTOC();} if (interfaceCreated) { utils.log( "TOC successfully switched to " + newMode + " mode" );if (this.state.preservedScrollPosition !== null) { setTimeout(function () { var targetScroll = self.state.preservedScrollPosition;var maxScroll = document.documentElement.scrollHeight - window.innerHeight;if (targetScroll > maxScroll) { targetScroll = maxScroll;utils.log( "DEBUG: Adjusted scroll position from " + self.state .preservedScrollPosition + "px to " + targetScroll + "px (max available)" );} window.scrollTo(0,targetScroll);utils.log( "Restored scroll position to: " + targetScroll + "px" );self.state.preservedScrollPosition = null;},300);} } else { utils.log( "Failed to create " + newMode + " TOC interface","error" );} } else { utils.log( "TOC mode unchanged (" + newMode + "),no action needed" );} },setupSmartVisibility: function () { var utils = CloudSync.adaptivePages.utils;var self = this;utils.log( "Setting up intelligent TOC visibility management" );var visibilityConfig = { scrollThreshold: 0.1,timeThreshold: 5000,hideOnTop: true,topThreshold: 0.05,modeSwitchTimeThreshold: 2000,modeSwitchScrollThreshold: 0.05,};var behaviorState = { pageLoadTime: this.state.pageLoadTime,isVisible: false,hasBeenVisible: false,lastScrollPosition: 0,scrollDirection: "down",isModeSwitch: Date.now() - this.state.pageLoadTime > 1000,};var scrollHandler = utils.throttle( function () { var currentTime = Date.now();var timeOnPage = currentTime - behaviorState.pageLoadTime;var scrollTop = window.pageYOffset || document.documentElement.scrollTop;var documentHeight = document.documentElement.scrollHeight - window.innerHeight;var scrollPercent = scrollTop / documentHeight;var newDirection = scrollTop > behaviorState.lastScrollPosition ? "down" : "up";behaviorState.scrollDirection = newDirection;behaviorState.lastScrollPosition = scrollTop;utils.log( "Behavior analysis: " + Math.round(scrollPercent * 100) + "% scrolled," + Math.round(timeOnPage / 1000) + "s on page,scrolling " + newDirection );self.evaluateVisibilityConditions( scrollPercent,timeOnPage,behaviorState,visibilityConfig );},100,"toc-smart-visibility" );utils.addEventListener(window,"scroll",scrollHandler,{ passive: true,});setTimeout(function () { utils.log( "DEBUG: Running initial visibility check after mode switch" );scrollHandler();},100);utils.log("Smart visibility system initialized");},evaluateVisibilityConditions: function ( scrollPercent,timeOnPage,behaviorState,visibilityConfig ) { var utils = CloudSync.adaptivePages.utils;var shouldBeVisible = this.calculateOptimalVisibility( scrollPercent,timeOnPage,behaviorState,visibilityConfig );if (shouldBeVisible !== behaviorState.isVisible) { this.updateTOCVisibility( shouldBeVisible,behaviorState );var reason = this.getVisibilityChangeReason( scrollPercent,timeOnPage,behaviorState,visibilityConfig );utils.log( "TOC visibility changed to " + (shouldBeVisible ? "visible" : "hidden") + ": " + reason );} },calculateOptimalVisibility: function ( scrollPercent,timeOnPage,behaviorState,visibilityConfig ) { var utils = CloudSync.adaptivePages.utils;var timeThreshold = behaviorState.isModeSwitch ? visibilityConfig.modeSwitchTimeThreshold : visibilityConfig.timeThreshold;var scrollThreshold = behaviorState.isModeSwitch ? visibilityConfig.modeSwitchScrollThreshold : visibilityConfig.scrollThreshold;var hasMinimumTimeInvestment = timeOnPage >= timeThreshold;var hasScrolledSufficientDistance = scrollPercent >= scrollThreshold;var isAtTopOfDocument = scrollPercent <= visibilityConfig.topThreshold;var shouldHideAtTop = visibilityConfig.hideOnTop && isAtTopOfDocument && behaviorState.hasBeenVisible;var primaryCondition = hasMinimumTimeInvestment && hasScrolledSufficientDistance;var overrideCondition = shouldHideAtTop;var result = primaryCondition && !overrideCondition;utils.log( "DEBUG TOC visibility: scrollPercent=" + Math.round(scrollPercent * 100) + "%" + ",timeOnPage=" + Math.round(timeOnPage / 1000) + "s" + ",timeThreshold=" + timeThreshold / 1000 + "s" + ",scrollThreshold=" + Math.round(scrollThreshold * 100) + "%" + ",isModeSwitch=" + behaviorState.isModeSwitch + ",hasMinTime=" + hasMinimumTimeInvestment + ",hasScrolled=" + hasScrolledSufficientDistance + ",shouldShow=" + result );return result;},updateTOCVisibility: function (shouldBeVisible,behaviorState) { var utils = CloudSync.adaptivePages.utils;var tocContainer = this.state.tocElements.desktopContainer;if (!tocContainer) { return;} if (shouldBeVisible && !behaviorState.isVisible) { tocContainer.classList.add("visible");behaviorState.isVisible = true;behaviorState.hasBeenVisible = true;utils.log("TOC activated with smooth animation");} else if (!shouldBeVisible && behaviorState.isVisible) { tocContainer.classList.remove("visible");behaviorState.isVisible = false;utils.log("TOC deactivated with smooth animation");} },getVisibilityChangeReason: function ( scrollPercent,timeOnPage,behaviorState,visibilityConfig ) { var timeInSeconds = Math.round(timeOnPage / 1000);var scrollPercentage = Math.round(scrollPercent * 100);if ( scrollPercent <= visibilityConfig.topThreshold && behaviorState.hasBeenVisible ) { return ( "User returned to top of document (" + scrollPercentage + "% position)" );} if (timeOnPage < visibilityConfig.timeThreshold) { return ( "Insufficient time investment: " + timeInSeconds + "s (minimum: " + Math.round(visibilityConfig.timeThreshold / 1000) + "s)" );} if (scrollPercent < visibilityConfig.scrollThreshold) { return ( "Insufficient scroll depth: " + scrollPercentage + "% (minimum: " + Math.round(visibilityConfig.scrollThreshold * 100) + "%)" );} return ( "Reading engagement detected: " + timeInSeconds + "s on page," + scrollPercentage + "% scrolled,direction: " + behaviorState.scrollDirection );},setupNavigationHandlers: function () { var utils = CloudSync.adaptivePages.utils;var self = this;utils.log("Setting up intelligent navigation handlers");if (!this.state.tocElements.tocList) { return;} var tocLinks = this.state.tocElements.tocList.querySelectorAll( ".toc-link" );for (var i = 0;i < tocLinks.length;i++) { var link = tocLinks[i];utils.addEventListener( link,"click",function (event) { event.preventDefault();var targetId = this.getAttribute("href").substring(1);var targetElement = document.getElementById(targetId);utils.log( "DEBUG: TOC link clicked,target: " + targetId );if (!targetElement) { utils.log( "Navigation target not found: " + targetId,"error" );return;} var optimalPosition = self.calculateOptimalScrollPosition( targetElement );self.performSmoothScroll( optimalPosition,targetElement );if (history.pushState) { history.pushState( null,null,"#" + targetId );} },{ passive: false } );} utils.log( "Navigation handlers attached to " + tocLinks.length + " TOC links" );},calculateOptimalScrollPosition: function (targetElement) { var utils = CloudSync.adaptivePages.utils;var elementTop = 0;var currentElement = targetElement;while (currentElement) { elementTop += currentElement.offsetTop;currentElement = currentElement.offsetParent;} var headerHeight = utils.getHeaderHeight();var breathingRoom = 20;var finalPosition = Math.max( 0,elementTop - headerHeight - breathingRoom );utils.log( 'Improved position calculation for "' + targetElement.textContent.trim() + '": ' + finalPosition + "px (absolute element position: " + elementTop + "px,header: " + headerHeight + "px)" );return finalPosition;},performSmoothScroll: function (targetPosition,targetElement) { var utils = CloudSync.adaptivePages.utils;utils.log( "Initiating smooth scroll to position: " + targetPosition + "px" );if ("scrollBehavior" in document.documentElement.style) { window.scrollTo({ top: targetPosition,behavior: "smooth",});utils.log( "Using native smooth scroll API for optimal performance" );this.detectScrollCompletion( targetPosition,targetElement );} else { utils.log( "Native smooth scroll not supported,using custom animation fallback" );this.performCustomSmoothScroll( targetPosition,targetElement );} },detectScrollCompletion: function ( targetPosition,targetElement ) { var utils = CloudSync.adaptivePages.utils;var checkInterval = 50;var tolerance = 5;var maxWaitTime = 2000;var startTime = Date.now();var completionChecker = setInterval(function () { var currentPosition = window.pageYOffset || document.documentElement.scrollTop;var timePassed = Date.now() - startTime;var positionReached = Math.abs(currentPosition - targetPosition) <= tolerance;var timeoutReached = timePassed >= maxWaitTime;if (positionReached || timeoutReached) { clearInterval(completionChecker);if (positionReached) { utils.log( 'Smooth scroll completed successfully to "' + targetElement.textContent.trim() + '"' );} else { utils.log( "Smooth scroll timeout reached,assuming completion" );} } },checkInterval);},recalculateHeadingPositions: function () { var utils = CloudSync.adaptivePages.utils;utils.log( "Recalculating heading positions after layout change" );var self = this;requestAnimationFrame(function () { for (var i = 0;i < self.state.headings.length;i++) { var heading = self.state.headings[i];var oldPosition = heading.offsetTop;heading.offsetTop = heading.element.offsetTop;utils.log( 'Updated heading "' + heading.text + '" position: ' + oldPosition + "px → " + heading.offsetTop + "px" );} utils.log( "Heading positions recalculated successfully" );});},cleanup: function () { var utils = CloudSync.adaptivePages.utils;utils.log("Cleaning up TOC module");if (this.state.tocElements.desktopContainer) { var desktopContainer = this.state.tocElements.desktopContainer;if (desktopContainer.parentNode) { desktopContainer.parentNode.removeChild( desktopContainer );} this.state.tocElements.desktopContainer = null;utils.log("Removed desktop TOC container");} if (this.state.tocElements.mobileButton) { var mobileButton = this.state.tocElements.mobileButton;if (mobileButton.parentNode) { mobileButton.parentNode.removeChild(mobileButton);} this.state.tocElements.mobileButton = null;utils.log("Removed mobile TOC button");} if (this.state.tocElements.mobilePanel) { var mobilePanel = this.state.tocElements.mobilePanel;if (mobilePanel.parentNode) { mobilePanel.parentNode.removeChild(mobilePanel);} this.state.tocElements.mobilePanel = null;utils.log("Removed mobile TOC panel");} if (this.state.observer) { this.state.observer.disconnect();this.state.observer = null;utils.log("Disconnected intersection observer");} if (this.state.mobileScrollHandler) { window.removeEventListener( "scroll",this.state.mobileScrollHandler );this.state.mobileScrollHandler = null;utils.log("Removed mobile scroll handler");} if (this.state.mobileEventHandlers) { if (this.state.mobileEventHandlers.globalKey) { document.removeEventListener( "keydown",this.state.mobileEventHandlers.globalKey );utils.log("Removed mobile global key handler");} if (this.state.mobileEventHandlers.documentClick) { document.removeEventListener( "click",this.state.mobileEventHandlers.documentClick );utils.log("Removed mobile document click handler");} this.state.mobileEventHandlers = null;} if (this.state.eventHandlers) { if (this.state.eventHandlers.scroll) { window.removeEventListener( "scroll",this.state.eventHandlers.scroll );this.state.eventHandlers.scroll = null;utils.log("Removed desktop scroll handler");} if (this.state.eventHandlers.resize) { window.removeEventListener( "resize",this.state.eventHandlers.resize );this.state.eventHandlers.resize = null;utils.log("Removed resize handler");} } this.state.tocElements.progressBar = null;this.state.tocElements.tocList = null;this.state.tocElements.mobileProgressCircle = null;this.state.tocElements.mobilePanelProgress = null;this.state.tocElements.mobileList = null;if (this.state.mobilePanel) { this.state.mobilePanel = null;} document.body.style.overflow = "";utils.log("TOC cleanup completed");},},imageLightbox: { config: { imageSelector: ".entry-content img,.gallery img,.wp-block-image img",animationDuration: 300,fadeInClass: "lightbox-fade-in",fadeOutClass: "lightbox-fade-out",closeOnClickOutside: true,closeOnEscape: true,showNavigation: true,showCounter: true,preloadAdjacent: true,maxZoomLevel: 3,},state: { isInitialized: false,isOpen: false,currentIndex: 0,images: [],lightboxContainer: null,imageElement: null,overlayElement: null,eventHandlers: { keydown: null,click: [],resize: null,},},init: function () { var utils = CloudSync.adaptivePages.utils;utils.log("🖼️ Starting ImageLightbox initialization...");utils.log( "🔍 Looking for images with selector: " + this.config.imageSelector );if (this.state.isInitialized) { utils.log("ImageLightbox already initialized");return true;} try { var images = document.querySelectorAll( this.config.imageSelector );utils.log( "📊 Found " + images.length + " images matching selector" );if (images.length === 0) { utils.log( "No lightbox-enabled images found on page" );return false;} this.createLightboxHTML();this.state.images = Array.from(images);this.bindEvents();this.addTouchSupport();this.addZoomSupport();utils.log( "ImageLightbox module initialized successfully","info" );utils.log( "Found " + images.length + " lightbox-enabled images" );utils.log("Touch/swipe and zoom features enabled");this.state.isInitialized = true;return true;} catch (error) { utils.log( "ImageLightbox initialization failed","error",error );return false;} },createLightboxHTML: function () { var lightbox = document.createElement("div");lightbox.id = "cloudsync-lightbox";lightbox.className = "cloudsync-lightbox";lightbox.setAttribute("role","dialog");lightbox.setAttribute("aria-modal","true");lightbox.setAttribute("aria-hidden","true");lightbox.setAttribute("aria-labelledby","lightbox-title");lightbox.innerHTML = '<div class="lightbox-overlay" role="presentation"></div>' + '<div class="lightbox-container">' + '<button class="lightbox-close" type="button" aria-label="Close lightbox">' + '<i class="fas fa-times" aria-hidden="true"></i>' + "</button>" + '<div class="lightbox-counter" aria-live="polite">' + '<span class="current">1</span> / <span class="total">1</span>' + "</div>" + '<div class="lightbox-image-wrapper">' + '<div class="lightbox-loading">' + '<div class="lightbox-spinner" role="status" aria-label="Loading image"></div>' + "</div>" + '<img class="lightbox-image" alt="" role="img" />' + "</div>" + '<button class="lightbox-nav lightbox-prev" type="button" aria-label="Previous image">' + '<i class="fas fa-chevron-left" aria-hidden="true"></i>' + "</button>" + '<button class="lightbox-nav lightbox-next" type="button" aria-label="Next image">' + '<i class="fas fa-chevron-right" aria-hidden="true"></i>' + "</button>" + '<div class="lightbox-info" id="lightbox-title">' + '<div class="lightbox-title"></div>' + '<div class="lightbox-meta"></div>' + "</div>" + "</div>";document.body.appendChild(lightbox);this.state.lightboxContainer = lightbox;this.state.imageElement = lightbox.querySelector(".lightbox-image");this.state.overlayElement = lightbox.querySelector(".lightbox-overlay");},bindEvents: function () { var self = this;var utils = CloudSync.adaptivePages.utils;utils.log( "🔗 Binding click events to " + this.state.images.length + " images" );this.state.images.forEach(function (image,index) { var handler = function (e) { utils.log( "🖱️ Image click detected! Index: " + index + ",Image src: " + image.src );e.preventDefault();self.open(index);};utils.log( "📎 Adding click handler to image " + (index + 1) + ": " + (image.src || "no src") );image.addEventListener("click",handler);image.style.cursor = "zoom-in";self.state.eventHandlers.click.push({ element: image,handler: handler,});utils.log( "✅ Click handler successfully added to image " + (index + 1) );});utils.log( "🎯 Total click handlers bound: " + this.state.eventHandlers.click.length );var closeBtn = this.state.lightboxContainer.querySelector( ".lightbox-close" );closeBtn.addEventListener("click",function () { self.close();});var prevBtn = this.state.lightboxContainer.querySelector( ".lightbox-prev" );var nextBtn = this.state.lightboxContainer.querySelector( ".lightbox-next" );prevBtn.addEventListener("click",function () { self.previous();});nextBtn.addEventListener("click",function () { self.next();});this.state.overlayElement.addEventListener( "click",function () { if (self.config.closeOnClickOutside) { self.close();} } );var keyHandler = function (e) { if (!self.state.isOpen) return;switch (e.key) { case "Escape": if (self.config.closeOnEscape) { self.close();} break;case "ArrowLeft": e.preventDefault();self.previous();break;case "ArrowRight": e.preventDefault();self.next();break;case " ": e.preventDefault();self.next();break;} };document.addEventListener("keydown",keyHandler);this.state.eventHandlers.keydown = keyHandler;var resizeHandler = utils.throttle(function () { if (self.state.isOpen) { self.updateLayout();} },250);window.addEventListener("resize",resizeHandler);this.state.eventHandlers.resize = resizeHandler;},open: function (index) { var utils = CloudSync.adaptivePages.utils;utils.log("🚀 Opening lightbox for image index: " + index);if (!this.state.isInitialized || this.state.isOpen) { utils.log( "❌ Lightbox open failed - not initialized or already open" );return false;} if (index < 0 || index >= this.state.images.length) { utils.log("Invalid image index: " + index,"error");return false;} try { this.state.currentIndex = index;this.state.isOpen = true;document.body.style.overflow = "hidden";this.state.lightboxContainer.classList.add( "lightbox-open" );this.state.lightboxContainer.setAttribute( "aria-hidden","false" );this.showImage(index);this.updateCounter();this.updateNavigation();var closeBtn = this.state.lightboxContainer.querySelector( ".lightbox-close" );if (closeBtn) { closeBtn.focus();} utils.log("Lightbox opened for image " + (index + 1));return true;} catch (error) { utils.log("Failed to open lightbox","error",error);return false;} },close: function () { var utils = CloudSync.adaptivePages.utils;if (!this.state.isOpen) { return false;} try { this.state.isOpen = false;this.state.lightboxContainer.classList.remove( "lightbox-open" );this.state.lightboxContainer.setAttribute( "aria-hidden","true" );document.body.style.overflow = "";this.state.imageElement.src = "";this.state.imageElement.alt = "";this.state.imageElement.classList.remove("loaded");var infoPanel = this.state.lightboxContainer.querySelector( ".lightbox-info" );if (infoPanel) { infoPanel.classList.remove("visible");} utils.log("Lightbox closed");return true;} catch (error) { utils.log("Failed to close lightbox","error",error);return false;} },next: function () { var utils = CloudSync.adaptivePages.utils;if (!this.state.isOpen || this.state.images.length <= 1) { return false;} var nextIndex = (this.state.currentIndex + 1) % this.state.images.length;this.showImage(nextIndex);this.state.currentIndex = nextIndex;this.updateCounter();this.updateNavigation();utils.log("Navigated to next image: " + (nextIndex + 1));return true;},previous: function () { var utils = CloudSync.adaptivePages.utils;if (!this.state.isOpen || this.state.images.length <= 1) { return false;} var prevIndex = this.state.currentIndex - 1;if (prevIndex < 0) { prevIndex = this.state.images.length - 1;} this.showImage(prevIndex);this.state.currentIndex = prevIndex;this.updateCounter();this.updateNavigation();utils.log( "Navigated to previous image: " + (prevIndex + 1) );return true;},showImage: function (index) { var utils = CloudSync.adaptivePages.utils;if (index < 0 || index >= this.state.images.length) { return;} var targetImage = this.state.images[index];var lightboxImage = this.state.imageElement;var loadingSpinner = this.state.lightboxContainer.querySelector( ".lightbox-loading" );var infoPanel = this.state.lightboxContainer.querySelector( ".lightbox-info" );if (loadingSpinner) { loadingSpinner.classList.remove("hidden");} lightboxImage.classList.remove("loaded");var img = new Image();img.onload = function () { lightboxImage.src = targetImage.src;lightboxImage.alt = targetImage.alt || "";lightboxImage.classList.add("loaded");if (loadingSpinner) { loadingSpinner.classList.add("hidden");} var titleElement = infoPanel.querySelector(".lightbox-title");var metaElement = infoPanel.querySelector(".lightbox-meta");if (titleElement && metaElement) { var title = targetImage.getAttribute("data-title") || targetImage.title || targetImage.alt || "Image " + (index + 1);var meta = "";if ( targetImage.naturalWidth && targetImage.naturalHeight ) { meta = targetImage.naturalWidth + " × " + targetImage.naturalHeight;} titleElement.textContent = title;metaElement.textContent = meta;setTimeout(function () { if (infoPanel) { infoPanel.classList.add("visible");} },300);} };img.onerror = function () { utils.log( "Failed to load image: " + targetImage.src,"error" );if (loadingSpinner) { loadingSpinner.classList.add("hidden");} };img.src = targetImage.src;if (this.config.preloadAdjacent) { this.preloadAdjacentImages(index);} },preloadAdjacentImages: function (currentIndex) { var imagesToPreload = [];var prevIndex = currentIndex - 1;if (prevIndex < 0) { prevIndex = this.state.images.length - 1;} if (prevIndex !== currentIndex) { imagesToPreload.push(prevIndex);} var nextIndex = (currentIndex + 1) % this.state.images.length;if (nextIndex !== currentIndex) { imagesToPreload.push(nextIndex);} var self = this;imagesToPreload.forEach(function (index) { if (index >= 0 && index < self.state.images.length) { self.preloadImage(self.state.images[index].src);} });},preloadImage: function (src) { var img = new Image();img.src = src;},updateCounter: function () { var counter = this.state.lightboxContainer.querySelector( ".lightbox-counter" );if (counter && this.state.images.length > 1) { var current = counter.querySelector(".current");var total = counter.querySelector(".total");if (current && total) { current.textContent = this.state.currentIndex + 1;total.textContent = this.state.images.length;} counter.style.display = "block";} else if (counter) { counter.style.display = "none";} },updateNavigation: function () { var prevBtn = this.state.lightboxContainer.querySelector( ".lightbox-prev" );var nextBtn = this.state.lightboxContainer.querySelector( ".lightbox-next" );if (this.state.images.length <= 1) { if (prevBtn) prevBtn.style.display = "none";if (nextBtn) nextBtn.style.display = "none";} else { if (prevBtn) prevBtn.style.display = "flex";if (nextBtn) nextBtn.style.display = "flex";} },updateLayout: function () { utils.log("Lightbox layout updated for viewport change");},cleanup: function () { if (!this.state.isInitialized) { return;} try { if (this.state.isOpen) { this.close();} if (this.state.eventHandlers.keydown) { document.removeEventListener( "keydown",this.state.eventHandlers.keydown );} if (this.state.eventHandlers.resize) { window.removeEventListener( "resize",this.state.eventHandlers.resize );} this.state.eventHandlers.click.forEach(function ( handlerInfo ) { handlerInfo.element.removeEventListener( "click",handlerInfo.handler );handlerInfo.element.style.cursor = "";});this.state.eventHandlers.click = [];if ( this.state.lightboxContainer && this.state.lightboxContainer.parentNode ) { this.state.lightboxContainer.parentNode.removeChild( this.state.lightboxContainer );} this.state.isInitialized = false;this.state.isOpen = false;this.state.currentIndex = 0;this.state.images = [];this.state.lightboxContainer = null;this.state.imageElement = null;this.state.overlayElement = null;this.state.eventHandlers = { keydown: null,click: null,resize: null,};utils.log( "ImageLightbox cleanup completed successfully" );} catch (error) { utils.log( "ImageLightbox cleanup encountered errors","error",error );} },addTouchSupport: function () { if (!this.state.lightboxContainer) { return;} var self = this;var startX = 0;var startY = 0;var distX = 0;var distY = 0;var threshold = 50;var restraint = 100;var allowedTime = 300;var startTime = 0;var imageWrapper = this.state.lightboxContainer.querySelector( ".lightbox-image-wrapper" );if (!imageWrapper) return;imageWrapper.addEventListener( "touchstart",function (e) { if (!self.state.isOpen) return;var touchObj = e.changedTouches[0];startX = touchObj.pageX;startY = touchObj.pageY;startTime = new Date().getTime();e.preventDefault();},{ passive: false } );imageWrapper.addEventListener( "touchmove",function (e) { if (!self.state.isOpen) return;var touchObj = e.changedTouches[0];distX = touchObj.pageX - startX;distY = touchObj.pageY - startY;if (Math.abs(distX) > 20) { imageWrapper.classList.add("swiping");imageWrapper.style.transform = "translateX(" + distX * 0.3 + "px)";} e.preventDefault();},{ passive: false } );imageWrapper.addEventListener( "touchend",function (e) { if (!self.state.isOpen) return;var elapsedTime = new Date().getTime() - startTime;imageWrapper.classList.remove("swiping");imageWrapper.style.transform = "";if (elapsedTime <= allowedTime) { if ( Math.abs(distX) >= threshold && Math.abs(distY) <= restraint ) { if (distX > 0) { self.previous();} else { self.next();} } else if ( Math.abs(distY) >= threshold && Math.abs(distX) <= restraint ) { if (distY > 0) { self.close();} } } e.preventDefault();},{ passive: false } );},addZoomSupport: function () { if (!this.state.imageElement) { return;} var self = this;var currentZoom = 1;var maxZoom = this.config.maxZoomLevel || 3;var minZoom = 1;var zoomIndicator = this.state.lightboxContainer.querySelector( ".lightbox-zoom-indicator" );if (!zoomIndicator) { zoomIndicator = document.createElement("div");zoomIndicator.className = "lightbox-zoom-indicator";zoomIndicator.textContent = "100%";this.state.lightboxContainer.appendChild(zoomIndicator);} this.state.imageElement.addEventListener( "wheel",function (e) { if (!self.state.isOpen) return;e.preventDefault();var delta = e.deltaY > 0 ? -0.1 : 0.1;currentZoom = Math.max( minZoom,Math.min(maxZoom,currentZoom + delta) );self.state.imageElement.style.transform = "scale(" + currentZoom + ")";if (currentZoom > 1) { self.state.imageElement.classList.add("zoomed");} else { self.state.imageElement.classList.remove( "zoomed" );} zoomIndicator.textContent = Math.round(currentZoom * 100) + "%";zoomIndicator.classList.add("visible");clearTimeout(self.zoomIndicatorTimeout);self.zoomIndicatorTimeout = setTimeout(function () { zoomIndicator.classList.remove("visible");},1000);},{ passive: false } );this.state.imageElement.addEventListener( "click",function (e) { if (!self.state.isOpen) return;e.stopPropagation();if (currentZoom > 1) { currentZoom = 1;self.state.imageElement.style.transform = "scale(1)";self.state.imageElement.classList.remove( "zoomed" );} else { currentZoom = 2;self.state.imageElement.style.transform = "scale(2)";self.state.imageElement.classList.add("zoomed");} zoomIndicator.textContent = Math.round(currentZoom * 100) + "%";zoomIndicator.classList.add("visible");clearTimeout(self.zoomIndicatorTimeout);self.zoomIndicatorTimeout = setTimeout(function () { zoomIndicator.classList.remove("visible");},1000);} );var originalShowImage = this.showImage;this.showImage = function (index) { currentZoom = 1;self.state.imageElement.style.transform = "scale(1)";self.state.imageElement.classList.remove("zoomed");zoomIndicator.classList.remove("visible");originalShowImage.call(self,index);};},testLightbox: function () { var utils = CloudSync.adaptivePages.utils;utils.log("🧪 LIGHTBOX DIAGNOSTIC TEST");utils.log("========================");utils.log( "Module initialized: " + this.state.isInitialized );utils.log("Lightbox is open: " + this.state.isOpen);utils.log("Image selector: " + this.config.imageSelector);var foundImages = document.querySelectorAll( this.config.imageSelector );utils.log( "Images found with selector: " + foundImages.length );if (foundImages.length > 0) { utils.log( "First image src: " + (foundImages[0].src || "no src") );utils.log( "First image classes: " + foundImages[0].className );utils.log( "First image parent: " + foundImages[0].parentElement.tagName );} utils.log( "Stored images in state: " + this.state.images.length );utils.log( "Event handlers bound: " + this.state.eventHandlers.click.length );if (foundImages.length > 0 && this.state.isInitialized) { utils.log( "🚀 Testing manual lightbox open for first image..." );this.open(0);} return { initialized: this.state.isInitialized,imagesFound: foundImages.length,imagesStored: this.state.images.length,handlersbound: this.state.eventHandlers.click.length,};},},},utils: { state: { isInitialized: false,eventListeners: [],throttledFunctions: new Map(),},init: function () { if (this.state.isInitialized) return;this.log("Initializing utility system","info");this.state.isInitialized = true;},log: function (message,level,data) { if (!CloudSync.adaptivePages.config.debug) return;var prefix = "[CloudSync AdaptivePages]";var timestamp = new Date().toISOString().substr(11,8);var fullMessage = prefix + " " + timestamp + " " + message;switch (level) { case "warn": console.warn(fullMessage,data || "");break;case "error": console.error(fullMessage,data || "");break;default: console.log(fullMessage,data || "");} },querySelector: function (selector,context) { context = context || document;try { var element = context.querySelector(selector);if (!element) { this.log("Element not found: " + selector,"warn");} return element;} catch (error) { this.log("Invalid selector: " + selector,"error",error);return null;} },querySelectorAll: function (selector,context) { context = context || document;try { return context.querySelectorAll(selector);} catch (error) { this.log("Invalid selector: " + selector,"error",error);return document.createDocumentFragment().childNodes;} },throttle: function (func,delay,key) { if (this.state.throttledFunctions.has(key)) { return this.state.throttledFunctions.get(key);} var lastExecution = 0;var timeoutId = null;var throttledFunction = function () { var context = this;var args = arguments;var now = Date.now();if (now - lastExecution >= delay) { lastExecution = now;func.apply(context,args);} else if (!timeoutId) { timeoutId = setTimeout(function () { lastExecution = Date.now();timeoutId = null;func.apply(context,args);},delay - (now - lastExecution));} };this.state.throttledFunctions.set(key,throttledFunction);return throttledFunction;},debounce: function (func,delay) { var timeoutId;return function () { var context = this;var args = arguments;clearTimeout(timeoutId);timeoutId = setTimeout(function () { func.apply(context,args);},delay);};},addEventListener: function (element,event,handler,options) { if (!element || typeof handler !== "function") { this.log("Invalid addEventListener parameters","error");return;} element.addEventListener(event,handler,options);this.state.eventListeners.push({ element: element,event: event,handler: handler,options: options,});},generateUniqueId: function (text,prefix) { prefix = prefix || "toc";var baseId = prefix + "-" + text .toLowerCase() .trim() .replace(/[^\w\s-]/g,"") .replace(/\s+/g,"-") .replace(/-+/g,"-") .substring(0,50);var finalId = baseId;var counter = 1;while (document.getElementById(finalId)) { finalId = baseId + "-" + counter;counter++;} return finalId;},getHeaderHeight: function () { var header = this.querySelector(".site-header");var adminBar = this.querySelector("#wpadminbar");var headerHeight = header ? header.offsetHeight : 0;var adminBarHeight = adminBar ? adminBar.offsetHeight : 0;return headerHeight + adminBarHeight;},scrollToElement: function (targetElement,additionalOffset) { if (!targetElement) return;additionalOffset = additionalOffset || 0;var headerHeight = this.getHeaderHeight();var totalOffset = headerHeight + additionalOffset + 20;var targetPosition = Math.max( 0,targetElement.offsetTop - totalOffset );if ("scrollBehavior" in document.documentElement.style) { window.scrollTo({ top: targetPosition,behavior: "smooth",});} else { window.scrollTo(0,targetPosition);} },cleanup: function () { this.log("Cleaning up utility system");this.state.eventListeners.forEach(function (listener) { if ( listener.element && listener.element.removeEventListener ) { listener.element.removeEventListener( listener.event,listener.handler,listener.options );} });this.state.eventListeners = [];this.state.throttledFunctions.clear();this.state.isInitialized = false;},},init: function () { try { this.utils.log("=== STARTING SYSTEM INITIALIZATION ===");if (this.state.isInitialized) { this.utils.log("System already initialized,skipping");return false;} if ( !document.body || !document.body.classList.contains("page") ) { this.utils.log( "Not a page context,initialization cancelled" );return false;} this.utils.log("Step 1: Initializing utility system");if (this.utils && typeof this.utils.init === "function") { this.utils.init();this.utils.log("✓ Utility system initialized successfully");} else { this.utils.log("✗ Utils system not available","error");return false;} this.utils.log("Step 2: Analyzing page context");this.state.pageContext = this.analyzePageContext();if (!Array.isArray(this.state.pageContext)) { this.utils.log( "Page context analysis failed,using empty array","warn" );this.state.pageContext = [];} this.utils.log( "✓ Page context: " + (this.state.pageContext.length > 0 ? this.state.pageContext.join(",") : "standard page") );this.utils.log("Step 3: Detecting device breakpoint");var detectedBreakpoint = this.detectBreakpoint();this.utils.log( "Breakpoint detection returned: " + detectedBreakpoint );if (detectedBreakpoint) { this.state.currentBreakpoint = detectedBreakpoint;this.utils.log( "✓ Breakpoint set to: " + this.state.currentBreakpoint );} else { this.utils.log( "Breakpoint detection failed,using mobile fallback","warn" );this.state.currentBreakpoint = "mobile";} this.utils.log("Step 4: Setting up global event listeners");this.setupGlobalListeners();this.utils.log("✓ Global listeners established");this.utils.log("Step 5: Initializing modules");this.initializeModules();this.utils.log("✓ Module initialization completed");this.state.isInitialized = true;this.utils.log( "=== SYSTEM INITIALIZATION COMPLETED SUCCESSFULLY ===" );setTimeout(function () { CloudSync.adaptivePages.debugSystem();},100);return true;} catch (error) { this.utils.log( "CRITICAL ERROR during initialization","error",error );return false;} },analyzePageContext: function () { var context = [];try { if ( document.querySelector("main") && document.querySelector("main").className ) { var mainClasses = document.querySelector("main").className;if (mainClasses.indexOf("page-type-legal") !== -1) { context.push("legal-document");} if (mainClasses.indexOf("long-content") !== -1) { context.push("long-form-content");} if (mainClasses.indexOf("image-rich") !== -1) { context.push("visual-heavy");} } if (window.location && window.location.pathname) { var currentPath = window.location.pathname.toLowerCase();if ( currentPath.indexOf("privacy") !== -1 || currentPath.indexOf("terms") !== -1 ) { context.push("legal-document");} } this.utils.log( "Page context analyzed: " + (context.length > 0 ? context.join(",") : "standard page") );} catch (error) { this.utils.log( "Error during page context analysis","error",error );} return context;},detectBreakpoint: function () { var utils = CloudSync.adaptivePages.utils;try { var windowWidth = window.innerWidth || 0;var windowHeight = window.innerHeight || 0;var screenWidth = window.screen ? window.screen.width : 0;var outerWidth = window.outerWidth || 0;utils.log( "Window dimensions: " + windowWidth + "x" + windowHeight );utils.log( "Screen width: " + screenWidth + ",Outer width: " + outerWidth );utils.log( "Breakpoint threshold: " + this.config.tocDesktopBreakpoint + "px" );var breakpoint;if (windowWidth >= this.config.tocDesktopBreakpoint) { breakpoint = "desktop";} else if (windowWidth >= 768) { breakpoint = "tablet";} else { breakpoint = "mobile";} utils.log( "Calculated breakpoint: " + breakpoint + " (based on width: " + windowWidth + "px)" );return breakpoint;} catch (error) { utils.log("Error in breakpoint detection","error",error);return "mobile";} },setupGlobalListeners: function () { var self = this;var resizeHandler = this.utils.debounce(function () { var oldBreakpoint = self.state.currentBreakpoint;var newBreakpoint = self.detectBreakpoint();if (oldBreakpoint !== newBreakpoint) { self.utils.log( "Breakpoint changed from " + oldBreakpoint + " to " + newBreakpoint );self.state.currentBreakpoint = newBreakpoint;self.handleBreakpointChange(oldBreakpoint,newBreakpoint);} },this.config.resizeDebounce);var resizeWrapper = function () { var currentScroll = window.scrollY || window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;if ( self.state.activeModules.indexOf("tableOfContents") !== -1 && self.modules.tableOfContents && self.modules.tableOfContents.state ) { self.modules.tableOfContents.state.lastKnownScrollPosition = currentScroll;self.utils.log( "DEBUG: Saved scroll position on resize: " + currentScroll + "px" );} resizeHandler();};this.utils.addEventListener(window,"resize",resizeWrapper,{ passive: true,});this.utils.log("Global event listeners established");},handleBreakpointChange: function (oldBreakpoint,newBreakpoint) { this.utils.log( "Handling breakpoint change: " + oldBreakpoint + " → " + newBreakpoint );this.state.activeModules.forEach( function (moduleName) { var module = this.modules[moduleName];if ( module && typeof module.handleBreakpointChange === "function" ) { module.handleBreakpointChange( oldBreakpoint,newBreakpoint );} }.bind(this) );},initializeModules: function () { var enabledModules = [];if (this.config.enableTOC) { enabledModules.push("tableOfContents");} if (this.config.enableProgress) { enabledModules.push("readingProgress");} if (this.config.enableLegalNav) { enabledModules.push("legalNavigation");} if (this.config.enableLightbox) { enabledModules.push("imageLightbox");} this.utils.log( "Initializing " + enabledModules.length + " enabled modules: " + enabledModules.join(",") );enabledModules.forEach( function (moduleName) { if ( this.modules[moduleName] && typeof this.modules[moduleName].init === "function" ) { try { var success = this.modules[moduleName].init();if (success) { this.state.activeModules.push(moduleName);this.utils.log( "Module " + moduleName + " initialized successfully" );} else { this.utils.log( "Module " + moduleName + " initialization returned false","warn" );} } catch (error) { this.utils.log( "Module " + moduleName + " initialization failed","error",error );} } else { this.utils.log( "Module " + moduleName + " not found or missing init method","warn" );} }.bind(this) );this.utils.log( "Module initialization completed. Active modules: " + this.state.activeModules.length );},debugSystem: function () { if (!this.config.debug) { console.log( "Debug mode is disabled. Enable debug in config to use this method." );return;} try { this.utils.log("=== COMPREHENSIVE SYSTEM STATE DEBUG ===");this.utils.log("System Status:");this.utils.log(" - Initialized: " + this.state.isInitialized);this.utils.log( " - Utils initialized: " + (this.utils.state ? this.utils.state.isInitialized : "utils.state not available") );this.utils.log("Breakpoint Information:");this.utils.log( " - Stored breakpoint: " + (this.state.currentBreakpoint || "null") );this.utils.log( " - Current window width: " + (window.innerWidth || "not available") );this.utils.log( " - Breakpoint threshold: " + this.config.tocDesktopBreakpoint );var realtimeBreakpoint = this.detectBreakpoint();this.utils.log( " - Real-time detection: " + realtimeBreakpoint );var contextInfo = "none";if ( this.state.pageContext && Array.isArray(this.state.pageContext) ) { if (this.state.pageContext.length > 0) { contextInfo = this.state.pageContext.join(",");} } else { contextInfo = "invalid (not an array): " + typeof this.state.pageContext;} this.utils.log("Page Context: " + contextInfo);var activeModulesInfo = "none";if ( this.state.activeModules && Array.isArray(this.state.activeModules) ) { if (this.state.activeModules.length > 0) { activeModulesInfo = this.state.activeModules.join(",");} } else { activeModulesInfo = "invalid (not an array): " + typeof this.state.activeModules;} this.utils.log("Active Modules: " + activeModulesInfo);if (this.utils && this.utils.state) { this.utils.log("Utility Statistics:");this.utils.log( " - Event listeners: " + (this.utils.state.eventListeners ? this.utils.state.eventListeners.length : "not available") );this.utils.log( " - Throttled functions: " + (this.utils.state.throttledFunctions ? this.utils.state.throttledFunctions.size : "not available") );} this.utils.log("Configuration:");this.utils.log(" - Debug mode: " + this.config.debug);this.utils.log(" - TOC enabled: " + this.config.enableTOC);this.utils.log( " - Desktop breakpoint: " + this.config.tocDesktopBreakpoint + "px" );this.utils.log("=== END COMPREHENSIVE DEBUG ===");} catch (error) { console.error( "[CloudSync AdaptivePages] Error in debugSystem:",error );} },testTOCModule: function () { var utils = this.utils;utils.log("=== STARTING TOC MODULE TEST ===");if (!this.modules.tableOfContents) { utils.log("ERROR: tableOfContents module not found","error");return false;} var initResult = this.modules.tableOfContents.init();utils.log("Initialization result: " + initResult);if (initResult) { utils.log("Testing scanHeadings method directly...");var scanResult = this.modules.tableOfContents.scanHeadings();utils.log("Scan result: " + scanResult);var headings = this.modules.tableOfContents.state.headings;utils.log("Headings found: " + headings.length);for (var i = 0;i < headings.length;i++) { var h = headings[i];utils.log( "Heading " + (i + 1) + ': "' + h.text + '" (H' + h.level + ",ID: " + h.id + ",pos: " + h.offsetTop + "px)" );} } utils.log("=== TOC MODULE TEST COMPLETED ===");return initResult;},lazyLoading: { init: function() { this.setupIntersectionObserver();this.loadCriticalImages();utils.log('Lazy loading initialized');},setupIntersectionObserver: function() { if (!('IntersectionObserver' in window)) { this.fallbackLoading();return;} const imageObserver = new IntersectionObserver((entries,observer) => { entries.forEach(entry => { if (entry.isIntersecting) { const img = entry.target;this.loadImage(img);observer.unobserve(img);} });},{ rootMargin: '50px 0px',threshold: 0.01 });document.querySelectorAll('img[data-src],img[loading="lazy"]').forEach(img => { imageObserver.observe(img);});},loadImage: function(img) { if (img.dataset.src) { img.style.filter = 'blur(5px)';img.style.transition = 'filter 0.3s ease';img.src = img.dataset.src;img.onload = () => { img.style.filter = 'none';img.classList.add('loaded');};img.onerror = () => { img.classList.add('error');utils.log('Failed to load image: ' + img.dataset.src);};delete img.dataset.src;} },loadCriticalImages: function() { const heroImages = document.querySelectorAll('.hero-section img,.header img');heroImages.forEach(img => { if (img.dataset.src) { this.loadImage(img);} });},fallbackLoading: function() { document.querySelectorAll('img[data-src]').forEach(img => { this.loadImage(img);});} },performance: { init: function() { this.optimizeScripts();this.setupResourceHints();this.monitorPerformance();utils.log('Performance optimizations initialized');},optimizeScripts: function() { const scripts = document.querySelectorAll('script[data-defer]');scripts.forEach(script => { if (script.src) { const newScript = document.createElement('script');newScript.src = script.src;newScript.defer = true;document.head.appendChild(newScript);script.remove();} });},setupResourceHints: function() { const prefetchDomains = [ 'fonts.googleapis.com','fonts.gstatic.com','cdnjs.cloudflare.com' ];prefetchDomains.forEach(domain => { if (!document.querySelector(`link[href*="${domain}"]`)) { const link = document.createElement('link');link.rel = 'dns-prefetch';link.href = ` document.head.appendChild(link);} });},monitorPerformance: function() { if ('performance' in window && 'PerformanceObserver' in window) { try { const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.entryType === 'largest-contentful-paint') { utils.log('LCP: ' + entry.startTime + 'ms');} if (entry.entryType === 'first-input') { utils.log('FID: ' + entry.processingStart - entry.startTime + 'ms');} if (entry.entryType === 'layout-shift') { utils.log('CLS: ' + entry.value);} } });observer.observe({entryTypes: ['largest-contentful-paint','first-input','layout-shift']});} catch (e) { utils.log('Performance monitoring not supported');} } } } };if (typeof window !== "undefined") { window.CloudSync = CloudSync;} })();